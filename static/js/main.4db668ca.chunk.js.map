{"version":3,"sources":["components/InputCity.js","components/SelectStation.js","components/ShowPollution.js","App.js","serviceWorker.js","index.js"],"names":["InputCity","id","className","autoComplete","onSubmit","this","props","getStations","type","name","placeholder","React","Component","SelectStation","loadingTownList","src","alt","stationListStatus","transitionName","transitionAppear","transitionEnter","transitionLeave","transitionEnterTimeout","transitionLeaveTimeout","transitionAppearTimeout","stationList","value","selectedStation","onChange","getStationPollution","disabled","selected","map","city","key","uid","station","refreshStationPollution","onClick","state2","labels","datasets","label","backgroundColor","hoverBackgroundColor","data","state","fill","lineTension","borderColor","borderWidth","ShowPollution","info","stationStatus","stationName","stationPollution","loadingStation","Object","keys","pollution","i","colorBar","colorLegendBarGreen","colorLegendBarOrange","colorLegendBarRed","pollutionValue","widthBar","style","height","role","width","aria-valuenow","aria-valuemin","aria-valuemax","options","title","display","text","fontSize","legend","position","App","undefined","e","preventDefault","setState","target","elements","fetch","then","response","json","length","status","iaqi","catch","error","console","log","bind","getCityStation","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4db668ca.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass InputCity extends React.Component {\r\n    render() {\r\n        return (\r\n            <div id=\"InputCity\" className={\"row mt-4\"}>\r\n                <div className=\"col-md-12 d-flex justify-content-center\">\r\n                    <h1 id=\"MainTitle\">Check the air quality in your city.</h1>\r\n                </div>\r\n                <div className=\"col-md-12 d-flex justify-content-center mt-5\">\r\n                    <form\r\n                        className=\"form-inline\"\r\n                        autoComplete=\"off\"\r\n                        onSubmit={this.props.getStations}>\r\n                        <div className=\"form-group d-flex justify-content-center mb-0\">\r\n                            <input\r\n                                className=\"form-control mr-2\"\r\n                                type=\"text\"\r\n                                name=\"city\"\r\n                                placeholder=\"Enter city name ...\"></input>\r\n                            <button className=\"btn btn-pollution\" type=\"submit\">Download </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InputCity;","import React from \"react\";\r\nimport ReactCSSTransitionGroup from \"react-addons-css-transition-group\";\r\n\r\nclass SelectStation extends React.Component {\r\n\r\n    render() {\r\n\r\n        if (this.props.loadingTownList) {\r\n            return (\r\n                <div className=\"row mt-3\">\r\n                    <div className=\"col-md-12 d-flex justify-content-center\">\r\n                        <img src={\"rings.svg\"} alt=\"loading\" /></div>\r\n                </div>\r\n            )\r\n        } else if (this.props.stationListStatus) {\r\n\r\n            if (this.props.stationListStatus === 'ok') {\r\n                this.stationListStatus = '';\r\n            } else {\r\n                this.stationListStatus = this.props.stationListStatus;\r\n            }\r\n            return (\r\n                <div>\r\n                    <ReactCSSTransitionGroup\r\n                        transitionName=\"fade\"\r\n                        transitionAppear={true}\r\n                        transitionEnter={false}\r\n                        transitionLeave={false}\r\n                        transitionEnterTimeout={1000}\r\n                        transitionLeaveTimeout={1000}\r\n                        transitionAppearTimeout={1000}>\r\n                        <div className=\"row mt-3\">\r\n                            <div className=\"col-md-12 d-flex justify-content-center\">\r\n                                {this.stationListStatus && <h2>{this.stationListStatus}</h2>}\r\n                                <br /> {this.props.stationList && <form>\r\n                                    <div className=\"form-group mt-2 mr-2 mb-0\">\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            value={this.props.selectedStation}\r\n                                            onChange={this.props.getStationPollution}>\r\n                                            <option disabled selected value>\r\n                      </option>\r\n                                            {this\r\n                                                .props\r\n                                                .stationList\r\n                                                .map(city => {\r\n                                                    return (\r\n                                                        <option key={city.uid} value={city.uid}>\r\n                                                            {city.station.name}\r\n                                                        </option>\r\n                                                    )\r\n                                                })\r\n                                            }</select>\r\n                                    </div>\r\n\r\n                                </form>}\r\n                            </div>\r\n                        </div>\r\n                    </ReactCSSTransitionGroup>\r\n                </div>\r\n            );\r\n        } else {\r\n            this.refreshStationPollution = this.props.refreshStationPollution;\r\n            return (\r\n                <div>\r\n                    <ReactCSSTransitionGroup\r\n                        transitionName=\"fade\"\r\n                        transitionAppear={true}\r\n                        transitionEnter={false}\r\n                        transitionLeave={false}\r\n                        transitionEnterTimeout={1000}\r\n                        transitionLeaveTimeout={1000}\r\n                        transitionAppearTimeout={1000}>\r\n                        <div className=\"row mt-3\">\r\n                            <div className=\"col-md-12 d-flex justify-content-center\">\r\n                                <br /> {this.props.stationList && <form className=\"form-inline\">\r\n                                    <div className=\"form-group mt-2 mr-2 mb-0\">\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            value={this.props.selectedStation}\r\n                                            onChange={this.props.getStationPollution}>\r\n                                            <option disabled selected value>\r\n                                                Select stations\r\n                    </option>\r\n                                            {this\r\n                                                .props\r\n                                                .stationList\r\n                                                .map(city => {\r\n                                                    return (\r\n                                                        <option key={city.uid} value={city.uid}>\r\n                                                            {city.station.name}\r\n                                                        </option>\r\n                                                    )\r\n                                                })\r\n                                            }</select>\r\n                                    </div>\r\n                                    <button onClick={this.refreshStationPollution} type=\"button\" className=\"btn btn-primary float-right mt-2\">Refresh</button>\r\n                                </form>}\r\n                            </div>\r\n                        </div>\r\n                    </ReactCSSTransitionGroup>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default SelectStation;\r\n","import React  from \"react\";\r\nimport ReactCSSTransitionGroup from \"react-addons-css-transition-group\";\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Pie, Doughnut } from 'react-chartjs-2';\r\n\r\nconst state2 = {\r\n    labels: ['No2', 'So2', 'O3',\r\n        'PM10', 'PM2.5'],\r\n    datasets: [\r\n        {\r\n            label: 'Rainfall',\r\n            backgroundColor: [\r\n                '#B21F00',\r\n                '#C9DE00',\r\n                '#2FDE00',\r\n                '#00A6B4',\r\n                '#6800B4'\r\n            ],\r\n            hoverBackgroundColor: [\r\n                '#501800',\r\n                '#4B5000',\r\n                '#175000',\r\n                '#003350',\r\n                '#35014F'\r\n            ],\r\n            data: [65, 59, 80, 81, 56]\r\n        }\r\n    ]\r\n}\r\nconst state = {\r\n    labels: ['No2', 'So2', 'O3',\r\n        'PM10', 'PM2.5'],\r\n    datasets: [\r\n        {\r\n            label: 'Pollution',\r\n            backgroundColor: 'rgba(75,192,192,1)',\r\n            fill: false,\r\n            lineTension: 0.5,\r\n            borderColor: 'rgba(0,0,0,1)',\r\n            borderWidth: 2,\r\n            data: [65, 59, 80, 81, 56]\r\n        }\r\n    ]\r\n}\r\nclass ShowPollution extends React.Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.info = {\r\n\r\n            \"pm25\": {\r\n                \"normalizer\": 100 / 71,\r\n                \"name\": \"PM 2.5\",\r\n                \"norms\": [\r\n                    [\r\n                        35, 'bar-green'\r\n                    ],\r\n                    [\r\n                        53, 'bar-orange'\r\n                    ],\r\n                    [71, 'bar-red']\r\n                ]\r\n            },\r\n            \"pm10\": {\r\n                \"normalizer\": 100 / 101,\r\n                \"name\": \"PM 10\",\r\n                \"norms\": [\r\n                    [\r\n                        40, 'bar-green'\r\n                    ],\r\n                    [\r\n                        75, 'bar-orange'\r\n                    ],\r\n                    [101, 'bar-red']\r\n                ]\r\n            },\r\n            \"no2\": {\r\n                \"normalizer\": 100 / 601,\r\n                \"name\": \"No2\",\r\n                \"norms\": [\r\n                    [\r\n                        200, 'bar-green'\r\n                    ],\r\n                    [\r\n                        400, 'bar-orange'\r\n                    ],\r\n                    [601, 'bar-red']\r\n                ]\r\n            },\r\n            \"so2\": {\r\n                \"normalizer\": 100 / 1065,\r\n                \"name\": \"So2\",\r\n                \"norms\": [\r\n                    [\r\n                        266, 'bar-green'\r\n                    ],\r\n                    [\r\n                        532, 'bar-orange'\r\n                    ],\r\n                    [1065, 'bar-red']\r\n                ]\r\n            },\r\n            \"o3\": {\r\n                \"normalizer\": 100 / 241,\r\n                \"name\": \"o3\",\r\n                \"norms\": [\r\n                    [\r\n                        100, 'bar-green'\r\n                    ],\r\n                    [\r\n                        160, 'bar-orange'\r\n                    ],\r\n                    [241, 'bar-red']\r\n                ]\r\n            }\r\n        }\r\n    }\r\n   \r\n\r\n    render() {\r\n        if (this.props.stationStatus) {\r\n            this.stationStatus = this.props.stationStatus;\r\n        }\r\n        if (this.props.stationName) {\r\n            this.stationName = this.props.stationName;\r\n        } else {\r\n            this.stationName = null;\r\n        }\r\n        if (this.props.stationPollution) {\r\n            this.stationPollution = this.props.stationPollution;\r\n        } else {\r\n            this.stationPollution = null;\r\n        }\r\n        if (this.props.loadingTownList) {\r\n            return (\r\n                <div></div>\r\n            )\r\n        } else if (this.props.loadingStation) {\r\n            return (\r\n                <div className=\"row mt-3\">\r\n                    <div className=\"col-md-12 d-flex justify-content-center\">\r\n                        <img src={\"rings.svg\"} alt=\"loading\" /></div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <ReactCSSTransitionGroup\r\n                        transitionName=\"fade\"\r\n                        transitionAppear={true}\r\n                        transitionEnter={false}\r\n                        transitionLeave={false}\r\n                        transitionEnterTimeout={1000}\r\n                        transitionLeaveTimeout={1000}\r\n                        transitionAppearTimeout={1000}>\r\n                        <div id=\"ShowPollution\" className=\"row mt-4 mb-5\">\r\n                            <div className=\"col-md-12 d-flex justify-content-center\">\r\n                                {this.stationName && <h2 id=\"CityTitle\">\r\n                                    <b>{this.stationName}</b>\r\n                                </h2>}\r\n                            </div>\r\n                            <div className=\"col-md-12 d-flex justify-content-center pr-0 pl-0\">\r\n                                {this.stationPollution && <div className=\"col-md-10\">\r\n                                    {Object\r\n                                        .keys(this.stationPollution)\r\n                                        .map((pollution, i) => {\r\n                                            let pollutionValue = this.stationPollution[pollution]['v'];\r\n                                            let info = this.info[pollution];\r\n                                            let colorBar;\r\n                                            let colorLegendBarGreen;\r\n                                            let colorLegendBarOrange;\r\n                                            let colorLegendBarRed;\r\n                                            let widthBar = pollutionValue;\r\n\r\n                                            if (pollution === \"pm25\" || pollution === \"pm10\" || pollution === \"no2\" || pollution === \"so2\" || pollution === \"o3\") {\r\n                                                widthBar = pollutionValue * info['normalizer'];\r\n                                                colorLegendBarGreen = info['norms'][0][0] * info['normalizer'];\r\n                                                colorLegendBarOrange = info['norms'][1][0] * info['normalizer'] - colorLegendBarGreen;\r\n                                                colorLegendBarRed = info['norms'][2][0] * info['normalizer'] - colorLegendBarOrange - colorLegendBarGreen;\r\n\r\n                                                if (pollutionValue <= info['norms'][0][0]) {\r\n                                                    colorBar = info['norms'][0][1];\r\n                                                } else if (pollutionValue <= info['norms'][1][0]) {\r\n                                                    colorBar = info['norms'][1][1]\r\n                                                } else {\r\n                                                    colorBar = info['norms'][2][1]\r\n                                                };\r\n\r\n                                                return (\r\n                                                    <div key={i} className=\"row mt-2\">\r\n                                                        <div className=\"col-md-2 d-flex align-items-center justify-content-center\">\r\n                                                            <h4 className=\"mb-0\">{this.info[pollution]['name']}</h4>\r\n                                                        </div>\r\n                                                        <div className=\"col-md-10\">\r\n                                                            <div\r\n                                                                className=\"progress legend\"\r\n                                                                style={{\r\n                                                                    height: '3px'\r\n                                                                }}>\r\n                                                                <div\r\n                                                                    className=\"progress-bar bar-green-info\"\r\n                                                                    role=\"progressbar\"\r\n                                                                    style={{\r\n                                                                        width: colorLegendBarGreen + \"%\"\r\n                                                                    }}\r\n                                                                    aria-valuenow=\"15\"\r\n                                                                    aria-valuemin=\"0\"\r\n                                                                    aria-valuemax=\"100\"></div>\r\n                                                                <div\r\n                                                                    className=\"progress-bar bar-orange-info\"\r\n                                                                    role=\"progressbar\"\r\n                                                                    style={{\r\n                                                                        width: colorLegendBarOrange + \"%\"\r\n                                                                    }}\r\n                                                                    aria-valuenow=\"30\"\r\n                                                                    aria-valuemin=\"0\"\r\n                                                                    aria-valuemax=\"100\"></div>\r\n                                                                <div\r\n                                                                    className=\"progress-bar bar-red-info\"\r\n                                                                    role=\"progressbar\"\r\n                                                                    style={{\r\n                                                                        width: colorLegendBarRed + \"%\"\r\n                                                                    }}\r\n                                                                    aria-valuenow=\"20\"\r\n                                                                    aria-valuemin=\"0\"\r\n                                                                    aria-valuemax=\"100\"></div>\r\n                                                            </div>\r\n                                                            <div\r\n                                                                className=\"progress\"\r\n                                                                style={{\r\n                                                                    height: '30px'\r\n                                                                }}>\r\n                                                                <div\r\n                                                                    className={\"progress-bar \" + colorBar}\r\n                                                                    role=\"progressbar\"\r\n                                                                    style={{\r\n                                                                        width: widthBar + '%'\r\n                                                                    }}\r\n                                                                    aria-valuenow={this.stationPollution[pollution]['v']}\r\n                                                                    aria-valuemax=\"10\"><span className=\"ml-2\">{this.stationPollution[pollution]['v']}</span>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                )\r\n                                            }\r\n                                        })}\r\n                                </div>}\r\n                            </div>\r\n                        </div>\r\n                    </ReactCSSTransitionGroup>\r\n                 <div>\r\n                        <div className=\"col-md-12 d-flex justify-content-center\">\r\n                            {this.stationName && <h2 id=\"CityTitle\">\r\n                                <b>{this.stationName}</b>\r\n                            </h2>}\r\n                        </div>\r\n                        <div className=\"col-md-12 d-flex justify-content-center pr-0 pl-0\">\r\n                            {this.stationPollution && <div className=\"col-md-10\">\r\n                                <Bar\r\n                                    data={state}\r\n                                    options={{\r\n                                        title: {\r\n                                            display: true,\r\n                                            text: 'Stats',\r\n                                            fontSize: 20\r\n                                        },\r\n                                        legend: {\r\n                                            display: true,\r\n                                            position: 'right'\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            </div>}\r\n                        </div>\r\n\r\n                 </div>                \r\n                 <div>\r\n                        <div className=\"col-md-12 d-flex justify-content-center\">\r\n                            {this.stationName && <h2 id=\"CityTitle\">\r\n                                <b>{this.stationName}</b>\r\n                            </h2>}\r\n                        </div>\r\n                        <div className=\"col-md-12 d-flex justify-content-center pr-0 pl-0\">\r\n                            {this.stationPollution && <div className=\"col-md-10\">\r\n                                <Line\r\n                                    data={state}\r\n                                    options={{\r\n                                        title: {\r\n                                            display: true,\r\n                                            text: 'Pollution',\r\n                                            fontSize: 20\r\n                                        },\r\n                                        legend: {\r\n                                            display: true,\r\n                                            position: 'right'\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            </div>}\r\n                        </div>\r\n\r\n                 </div>                \r\n                 <div>\r\n                        <div className=\"col-md-12 d-flex justify-content-center\">\r\n                            {this.stationName && <h2 id=\"CityTitle\">\r\n                                <b>{this.stationName}</b>\r\n                            </h2>}\r\n                        </div>\r\n                        <div className=\"col-md-12 d-flex justify-content-center pr-0 pl-0\">\r\n                            {this.stationPollution && <div className=\"col-md-10\">\r\n                                <Pie\r\n                                    data={state2}\r\n                                    options={{\r\n                                        title: {\r\n                                            display: true,\r\n                                            text: 'Pollution During Day',\r\n                                            fontSize: 20\r\n                                        },\r\n                                        legend: {\r\n                                            display: true,\r\n                                            position: 'right'\r\n                                        }\r\n                                    }}\r\n                                />\r\n\r\n                                <Doughnut\r\n                                    data={state2}\r\n                                    options={{\r\n                                        title: {\r\n                                            display: true,\r\n                                            text: 'Pollution During Day',\r\n                                            fontSize: 20\r\n                                        },\r\n                                        legend: {\r\n                                            display: true,\r\n                                            position: 'right'\r\n                                        }\r\n                                    }}\r\n                                />\r\n                                />\r\n                            </div>}\r\n                        </div>\r\n\r\n                 </div>                \r\n                </div>\r\n                \r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default ShowPollution;","import React from \"react\";\n\nimport InputCity from \"./components/InputCity\";\nimport SelectStation from \"./components/SelectStation\";\nimport ShowPollution from \"./components/ShowPollution\";\n\n\n\nclass App extends React.Component {\n  state = {\n\n    //Status request po wykonaniu getStations()\n    stationListStatus: undefined,\n\n    //Lista stacji przekazywana do <select>\n    stationList: undefined,\n\n    // Nazwa stacji\n    stationName: undefined,\n\n    // Status reuqest po wykonaniu getStationPollution()\n    stationStatus: undefined,\n\n    //Wybrana stracja z listy select\n    selectedStation: undefined,\n\n    //Zanieczyszczenie dla stacji\n    stationPollution: undefined,\n\n    //Wykorzystywane do wywoływania statusu \"loading\" \n    loadingTownList: false,\n    loadingStation: false,\n\n  }\n\n  constructor(props) {\n    super(props)\n    this.getStationPollution = this.getStationPollution.bind(this);\n    this.refreshStationPollution = this.refreshStationPollution.bind(this);\n    // this.getStations = this.getStations.bind(this);\n\n  }\n\n\n  //Input - City Name (String), Zwraca - Liste stacji w danym mieście (Array)\n  getStations = (e) => {\n    e.preventDefault();\n\n    this.setState({\n      stationListStatus: undefined,\n      stationList: { \"status\": \"ok\", \"data\": { \"iaqi\": { \"brak\": { \"v\": 'Brak danych' } } } },\n      loadingTownList: true,\n      selectedStation: undefined,\n\n      // Zerowanie danych poprzednio wyszukanego miasta\n      stationName: null,\n      // Zerowanie danych poprzednio wybraje stacji\n      stationPollution: undefined,\n\n    })\n\n    const city = e.target.elements.city.value;\n    fetch(`https://api.waqi.info/search/?keyword=${city}&token=7c200db3b52810d3f6a68b989445e0289d3428b8`)\n      //fetch(`citylist.json`)\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n\n        if (data.data.length === 0) {\n          this.setState({\n            stationListStatus: 'Unfortunately we found nothing. We can suggest checking for missing Polish characters. We will improve it soon ...',\n            stationList: undefined,\n            loadingTownList: false,\n          })\n        } else {\n          this.setState({\n            stationListStatus: data.status,\n            stationList: data.data,\n            loadingTownList: false,\n          });\n        }\n      });\n  }\n\n  getStationPollution = (e) => {\n\n    this.setState({\n      stationListStatus: undefined,\n      stationName: undefined,\n      stationStatus: undefined,\n      stationPollution: undefined,\n      loadingStation: true,\n      selectedStation: e.target.value,\n    })\n\n    const station = e.target.value;\n\n    fetch(`https://api.waqi.info/feed/@${station}/?token=7c200db3b52810d3f6a68b989445e0289d3428b8`)\n      //fetch(`${city}.json`)\n      .then((data) => {\n        this.setState({\n          stationPollution: undefined,\n          loadingStation: true,\n        })\n        return data.json()\n      })\n      .then((data) => {\n        if ((((data || {}).data) || {}).iaqi) {\n          this.setState({\n            stationName: data.data.city.name,\n            stationStatus: data.status,\n            stationPollution: data.data.iaqi,\n            loadingStation: false\n          });\n        } else if (((data || {}).status) || {}) {\n          this.setState({\n            stationName: \"No data available, please try in a moment.\",\n            stationStatus: data.status,\n            stationPollution: null,\n            loadingStation: false\n          });\n        }\n        return data\n      }).catch((error) => {\n        console.log('Error: ', error);\n        this.setState({\n          stationName: \"Error\",\n          stationPollution: undefined,\n          stationStatus: \"Error\",\n          loadingStation: false\n        });\n      })\n  }\n\n\n  refreshStationPollution = () => {\n\n    const station = this.state.selectedStation;\n\n    fetch(`https://api.waqi.info/feed/@${station}/?token=7c200db3b52810d3f6a68b989445e0289d3428b8`)\n      //fetch(`${city}.json`)\n      .then((data) => {\n        this.setState({\n          stationPollution: undefined,\n          loadingStation: true,\n        })\n\n        return data.json()\n      })\n      .then((data) => {\n        if ((((data || {}).data) || {}).iaqi) {\n          this.setState({\n            stationName: data.data.city.name,\n            stationStatus: data.status,\n            stationPollution: data.data.iaqi,\n            loadingStation: false\n          });\n        } else if (((data || {}).status) || {}) {\n          this.setState({\n            stationName: \"No data available, please try in a moment.\",\n            stationStatus: data.status,\n            stationPollution: null,\n            loadingStation: false\n          });\n        }\n        return data\n      }).catch((error) => {\n        console.log('Error: ', error);\n        this.setState({\n          stationName: \"Error\",\n          stationPollution: undefined,\n          stationStatus: \"Error\",\n          loadingStation: false\n        });\n      })\n  }\n\n\n\n  render() {\n    return (\n      <div id=\"MainView\" className=\"container-fluid d-flex align-items-center pl-0 pr-0\">\n        <div className=\"container \">\n\n          <InputCity\n            getStations={this.getStations}\n          />\n\n          <SelectStation\n            stationListStatus={this.state.stationListStatus}\n            stationList={this.state.stationList}\n            selectedStation={this.state.selectedStation}\n            getStationPollution={this.getStationPollution}\n            getCityStation={this.getCityStation}\n            loadingTownList={this.state.loadingTownList}\n            refreshStationPollution={this.refreshStationPollution}\n          />\n\n          <ShowPollution\n            stationPollution={this.state.stationPollution}\n            stationName={this.state.stationName}\n            stationStatus={this.state.stationStatus}\n            loadingStation={this.state.loadingStation}\n            loadingTownList={this.state.loadingTownList}\n          />\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}